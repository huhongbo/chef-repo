#!/bin/sh

#v 0.02 sensu-client shell
# code dn365
# chkconfig: 345 90 90
# description: Sensu monitoring framework client

### BEGIN INIT INFO
# Provides:       sensu-client
# Required-Start: $remote_fs $network
# Required-Stop:  $remote_fs $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Description:    Sensu monitoring framework client
### END INIT INFO

system=unknown
if [ -f /etc/redhat-release ]; then
    system=redhat
elif [ -f /etc/debian_version ]; then
    system=debian
elif [ -f /etc/SuSE-release ]; then
    system=suse
elif [ -f /etc/gentoo-release ]; then
    system=gentoo
elif [ -f /etc/arch-release ]; then
     system=arch
elif [ -f /etc/slackware-version ]; then
    system=slackware
elif [ -f /etc/lfs-release ]; then
    system=lfs
elif [ `echo | uname` = "HP-UX" ]; then
	system=hpux
    export PATH=$PATH:/usr/local/ruby1.9/bin
elif [ `echo | uname` = "AIX" ]; then
    system=aix
    export PATH=$PATH:/opt/freeware/ruby1.9/bin
fi

prog="sensu-client"

if [ "$system" = "aix" ]; then
	sensu_exec=/opt/freeware/ruby1.9/bin/$prog
	pidfile=/var/chef/run/$prog.pid
elif [ "$system" = "hpux" ]; then
	sensu_exec=/usr/local/ruby1.9/bin/$prog
	pidfile=/var/run/$prog.pid
else
	sensu_exec=`which $prog`
	pidfile=/var/run/$prog.pid
fi
logfile=/var/log/$prog.log
lockfile=/var/chef/lock/$prog


start() 
{
    echo "Starting $prog"


	if [ "$system" != "aix" ]; then
		status=$(pgrep -fl $sensu_exec | grep -v grep | grep -v bash | cut -f1 -d" ")
	else
		status=$(ps exw | grep $sensu_exec | grep -v grep | awk '{ print $1 }') 
	fi

    [ -x $sensu_exec ] || exit 5
	
	if [  "$status" != "" ]; then
       		echo "$prog is already running."
        	exit 0
	fi

    #ensure_pid_dir
    $sensu_exec -b -p $pidfile -l $logfile
    RETVAL=$?
    sleep 1


    if [ $RETVAL -eq 0 ]; then
        touch $lockfile
    fi
    
    echo "$prog startup success."
    return $RETVAL
}

stop_sensu() 
{
    echo "Stopping $prog"

	if [ "$system" != "aix" ]; then
		status=$(pgrep -fl $sensu_exec | grep -v grep | grep -v bash | cut -f1 -d" ")
	else
		status=$(ps exw | grep $sensu_exec | grep -v grep  | awk '{ print $1 }')
	fi

    if [ -f $pidfile ]; then
        #killproc -p $pidfile $prog
	kill -9 `cat $pidfile`
        RETVAL=$?
        if [ $RETVAL -eq 0 ]; then
            rm -f $pidfile
            rm -f $lockfile
            echo "$prog stop success."
        else
	    kill -9 $status
	    RETVAL=$?
	    if [ $RETVAL -eq 0 ];then
              rm -f $pidfile
              rm -f $lockfile
              echo "$prog stop success."
	    else
              echo "$prog error."
	    fi
        fi
        return $RETVAL
    else
	pid=$status
	echo $pid
        if [  "$pid" != "" ]; then
        	kill -9 $pid
            	RETVAL=$?
            	if [ $RETVAL -eq 0 ]; then
                	rm -f $pidfile
                	rm -f $lockfile
                	echo "$prog stop success."
		else
			echo "$prog stop error."
            	fi
	elif [ -f $pidfile ]; then
		rm -f $pidfile
	elif [ -f $lockfile ]; then
		rm -f $lockfile
       	fi
    fi
}

status() 
{
    #local pid

    # First try "ps"
	if [ "$system" = "aix" ]; then
		status=$(ps exw | grep $sensu_exec | grep -v grep  | awk '{ print $1 }')
	else
		status=$(pgrep -fl $sensu_exec | grep -v grep | grep -v bash | cut -f1 -d" ")
	fi

    pid=$status
    if [ -n "$pid" ]; then
	echo $"${prog} (pid $pid) is running..."
    	return 0
    fi

    # See if $lockfile
    if [ -f "$lockfile" ]; then
        echo $"${prog} dead but subsys locked"
        return 1
    fi

    echo $"${prog} is stopped"
    return 2
}

# sometimes sensu components need a moment to shutdown, so
# let's implement a waiting approach to restarts with a timeout
restart_sensu() 
{
    max_wait=10
    count=0; success=0

    stop_sensu
	while [ $count -lt $max_wait ]; do
		
		if [ "$system" != "aix" ]; then
			status=$(pgrep -fl $sensu_exec | grep -v grep | grep -v bash | cut -f1 -d" ")
		else
			status=$(ps exw | grep $sensu_exec | grep -v grep  | awk '{ print $1 }')
		fi
		count=$((count + 1)) 
		if [ "$status" != "" ]; then
			sleep 1
		else
	       		success=1
			break
		fi
	done

    sleep 1
	if [ $success = 1 ]; then
		start
	else
		echo "Timed out waiting for $prog to stop"
	  	return 1
	fi

 
}

case "$1" in
  'start')
        start
        ;;
  'stop')
        stop_sensu
        ;;
  'status')
        status
        ;;
  'restart')
        restart_sensu
        ;;
  *)
        echo "Usage: $0 {start|stop|status|restart}"
        exit 2
esac

exit $?
