#!/bin/sh

#v 0.01 logstash shell
# code dn365
# chkconfig: 345 90 90
# description: logstash monitoring framework client

### BEGIN INIT INFO
# Provides:       logstash
# Required-Start: $remote_fs $network
# Required-Stop:  $remote_fs $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Description:    logstash monitoring framework client
### END INIT INFO

system=unknown
if [ -f /etc/redhat-release ]; then
    system=redhat
elif [ -f /etc/debian_version ]; then
    system=debian
elif [ -f /etc/SuSE-release ]; then
    system=suse
elif [ -f /etc/gentoo-release ]; then
    system=gentoo
elif [ -f /etc/arch-release ]; then
     system=arch
elif [ -f /etc/slackware-version ]; then
    system=slackware
elif [ -f /etc/lfs-release ]; then
    system=lfs
elif [ `echo | uname` = "HP-UX" ]; then
    system=hpux
    export PATH=$PATH:/usr/local/ruby1.9/bin
elif [ `echo | uname` = "AIX" ]; then
    system=aix
    export PATH=$PATH:/opt/freeware/ruby1.9/bin
fi

prog="logstash"

if [ "$system" = "aix" ]; then
    logstash_exec=/opt/freeware/ruby1.9/lib/ruby/gems/1.9.1/gems/logstash-1.1.10/bin/logstash
elif [ "$system" = "hpux" ]; then
    logstash_exec=/usr/local/ruby1.9/lib/ruby/gems/1.9.1/gems/logstash-1.1.10/bin/logstash
else
    logstash_exec=`which $prog`
fi
logfile=/var/log/$prog.log
lockfile=/var/chef/lock/$prog


function start
{
    echo "Starting $prog"


    if [ "$system" = "aix" ]; then
        status=$(ps exw | grep logstash-1.1.10 | grep -v grep | awk '{ print $1 }')
    elif [ "$system" = "hpux" ];then
        status=$(ps -ef | grep logstash-1.1.10 | grep gems | grep -v grep | awk '{ print $2 }')
    else
        status=$(pgrep -fl logstash-1.1.10 | grep -v grep | grep -v bash | cut -f1 -d" ")
    fi

    [ -x $logstash_exec ] || exit 5

    if [  "$status" != "" ]; then
            echo "$prog is already running."
            exit 0
    fi

    #ensure_pid_dir
    cd /opt/logstash; nohup $logstash_exec agent --config /opt/logstash/etc/shipper.conf --log /var/log/logstash.log --grok-patterns-path /opt/logstash/etc/patterns &
    RETVAL=$?
    sleep 1


    if [ $RETVAL -eq 0 ]; then
        touch $lockfile
    fi

    echo "$prog startup success."
    return $RETVAL
}

function stop_logstash
{
    echo "Stopping $prog"
    if [ "$system" = "aix" ]; then
        status=$(ps exw | grep logstash-1.1.10 | grep -v grep | awk '{ print $1 }')
    elif [ "$system" = "hpux" ];then
        status=$(ps -ef | grep logstash-1.1.10 | grep -v grep | awk '{ print $2 }')
    else
        status=$(pgrep -fl logstash-1.1.10 | grep -v grep | grep -v bash | cut -f1 -d" ")
    fi
	echo $status | xargs kill -9 
        RETVAL=$?
        if [ $RETVAL -eq 0 ];then
             rm -f $lockfile
              echo "$prog stop success."
        else
              echo "$prog error."
        fi
        return $RETVAL
}

function status
{
    #local pid

    # First try "ps"
    if [ "$system" = "aix" ]; then
        status=$(ps exw | grep logstash-1.1.10 | grep -v grep | awk '{ print $1 }')
    elif [ "$system" = "hpux" ];then
        status=$(ps -ef | grep logstash-1.1.10 | grep -v grep | awk '{ print $2 }')
    else
        status=$(pgrep -fl logstash-1.1.10 | grep -v grep | grep -v bash | cut -f1 -d" ")
    fi

    pid=$status
    if [ -n "$pid" ]; then
    echo $"${prog} (pid $pid) is running..."
        return 0
    fi

    # See if $lockfile
    if [ -f "$lockfile" ]; then
        echo $"${prog} dead but subsys locked"
        return 1
    fi

    echo $"${prog} is stopped"
    return 2
}

# sometimes sensu components need a moment to shutdown, so
# let's implement a waiting approach to restarts with a timeout
function restart
{
    max_wait=10
    count=0; success=0

    stop_logstash
    while [ $count -lt $max_wait ]; do

        if [ "$system" = "aix" ]; then
            status=$(ps exw | grep logstash-1.1.10 | grep -v grep | awk '{ print $1 }')
        elif [ "$system" = "hpux" ];then
            status=$(ps -ef | grep logstash-1.1.10 | grep -v grep | awk '{ print $2 }')
        else
            status=$(pgrep -fl logstash-1.1.10 | grep -v grep | grep -v bash | cut -f1 -d" ")
        fi
        count=$((count + 1))
        if [ "$status" != "" ]; then
            sleep 1
        else
              success=1
            break
        fi
    done

    sleep 1
    if [ $success = 1 ]; then
        start
    else
        echo "Timed out waiting for $prog to stop"
        return 1
    fi


}

function clean
{
	rm -rf /opt/logstash/.incedb*
}

case "$1" in
  'start')
        start
        ;;
  'stop')
        stop_logstash
        ;;
  'status')
        status
        ;;
  'restart')
        restart
        ;;
  'clean')
        stop_logstash;clean;start
        ;;
  *)
        echo "Usage: $0 {start|stop|status|restart|clean}"
        exit 2
esac

exit $?
